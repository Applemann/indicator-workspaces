#!/usr/bin/python3

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, AppIndicator3, Wnck
from gi.repository.Gio import Settings, SettingsBindFlags
from gi.repository.GLib import Variant

import fcntl
import os
import signal
import sys
import tempfile
import time
import warnings

class IndicatorWorkspaces:

  def __new__(cls, *args, **kwargs):
    IndicatorWorkspaces._check_running()
    return super(IndicatorWorkspaces, cls).__new__(cls)

  def __init__(self):
    # Create Indicator
    self.indicator = AppIndicator3.Indicator.new("indicator-eos-workspaces", "", AppIndicator3.IndicatorCategory.APPLICATION_STATUS)
    self.indicator.set_status (AppIndicator3.IndicatorStatus.ACTIVE)

    # Create Screen
    self.screen = Wnck.Screen.get_default()
    self.screen.force_update()

    # Create Icon
    self.icon = WorkspacesIcon()

    # Create Menu
    self.create_menu()

    # Connect screen to active workspace changed
    self.screen.connect('active-workspace-changed', self.set_active_workspace)
    self.screen.connect('workspace-created', self.create_menu)
    self.screen.connect('workspace-destroyed', self.create_menu)

    # Set active workspace
    self.set_active_workspace()

  def _check_running():
    lockfile_path = os.path.normpath(tempfile.gettempdir() + '/' + os.path.basename(__file__) + '.lock')
    lockfile_pointer = os.open(lockfile_path, os.O_CREAT | os.O_TRUNC | os.O_WRONLY)
    try:
      fcntl.lockf(lockfile_pointer, fcntl.LOCK_EX | fcntl.LOCK_NB)
    except IOError:
      print("\nAnother instance is already running, quitting.")
      sys.exit(-1)

  def create_menu(self, *args):
    self.menu = WorkspacesMenu(self)
    self.menu.show_all()
    self.indicator.set_menu(self.menu)

  def create_workspace_preferences(self, *args):
    try:
      self.workspaces_preferences
    except:
      self.workspaces_preferences = WorkspacesPreferences(self)

  def set_active_workspace(self, *args):
    self.workspace_active = self.screen.get_active_workspace()
    workspace_active_number = self.workspace_active.get_number()
    self.menu.workspaces_list[workspace_active_number].set_active(True)
    self.icon.set(self.indicator, workspace_active_number)
    self.indicator.set_label(self.menu.workspaces_list[workspace_active_number].get_label(), "")

class WorkspacesIcon():
  def set(self, indicator, workspace_number = None):
    if workspace_number + 1 > 9:
      ic = "indicator-workspaces-infinite"
    else:
      ic = "indicator-workspaces-%d" % (workspace_number+1)
    indicator.set_icon(ic)

class WorkspacesMenu(Gtk.Menu):

  def __init__(self, parent):
    Gtk.Menu.__init__(self)

    self.parent = parent

    # Get workspace names
    setting = Settings.new("org.gnome.desktop.wm.preferences")
    workspace_names = setting.get_value("workspace-names").unpack()

    # Generate workspace names if none exist
    workspace_count = self.parent.screen.get_workspace_count()
    workspace_names_count = len(workspace_names)

    # Fill in any missing workspace names
    if workspace_names_count < workspace_count:
      workspace_names += [''] * (workspace_count - workspace_names_count)

    for index, workspace_name in enumerate(workspace_names):
      if workspace_name == '':
        workspace_names[index] = "Workspace %d" % (index + 1)

    # Create items for the menu from the workspace names
    self.workspaces_list = []
    for number,workspace_name in enumerate(workspace_names):
      if number < workspace_count:
        if number == 0:
          self.workspaces_list.append(Gtk.RadioMenuItem(group=None, label=workspace_name))
        else:
          self.workspaces_list.append(Gtk.RadioMenuItem(group=self.workspaces_list[number-1], label=workspace_name))
        self.workspaces_list[number].connect("activate", self.switch_to_desktop, number)
        self.append(self.workspaces_list[number])

    # Add separator
    separator = Gtk.SeparatorMenuItem()
    self.append(separator)

    # Add quit button
    preferences = Gtk.MenuItem("Preferences")
    preferences.connect("activate",self.parent.create_workspace_preferences)
    self.append(preferences)

  def switch_to_desktop(self, workspace, number):
    if self.workspaces_list[number].get_active():
      timestamp = int(time.time())
      self.parent.screen.get_workspace(number).activate(timestamp)

class WorkspacesPreferences():
  def __init__(self, parent):
    self.parent = parent

    builder = Gtk.Builder()
    builder.add_from_file(os.path.abspath(os.path.dirname(__file__)) + "/" + "indicator-workspaces-preferences.glade")

    # Dynamic workspaces
    setting = Settings.new("org.pantheon.desktop.gala.behavior")
    self.switch_dyanamic_workspaces = builder.get_object("switch-dynamic-workspaces")
    setting.bind("dynamic-workspaces", self.switch_dyanamic_workspaces, 'active', SettingsBindFlags.DEFAULT)

    # Number of workspaces
    setting = Settings.new("org.gnome.desktop.wm.preferences")
    self.spin_button_number_of_workspaces = builder.get_object("spin-button-number-of-workspaces")
    self.label_number_of_workspaces = builder.get_object("label-number-of-workspaces")
    self.label_number_of_workspaces.set_sensitive(not self.switch_dyanamic_workspaces.get_active())
    self.spin_button_number_of_workspaces.set_sensitive(not self.switch_dyanamic_workspaces.get_active())
    setting.bind("num-workspaces", self.spin_button_number_of_workspaces, 'value', SettingsBindFlags.DEFAULT)

    # Workspace names
    setting = Settings.new("org.gnome.desktop.wm.preferences")
    workspace_names = setting.get_value("workspace-names").unpack()
    self.entry_workspaces = []
    # Get workspaces
    for i in range(1, 10):
      self.entry_workspaces.append(builder.get_object("entry-workspace-%d" % i))
    # Populate workspace names
    for index, workspace_name in enumerate(workspace_names):
      self.entry_workspaces[index].set_text(workspace_name)

    self.dialog = builder.get_object("dialog")
    self.dialog.show_all()

    builder.connect_signals(self)

  def on_switch_dynamic_workspaces_active(self, switch, *args):
    self.label_number_of_workspaces.set_sensitive(not switch.get_active())
    self.spin_button_number_of_workspaces.set_sensitive(not switch.get_active())

  def on_entry_workspace_text(self, entry, *args):
    workspace_names = []
    for workspace in self.entry_workspaces:
      workspace_names.append(workspace.get_text())
    setting = Settings.new("org.gnome.desktop.wm.preferences")
    setting.set_value("workspace-names", Variant("as", workspace_names))
    self.parent.create_menu()

  def on_close_clicked(self, *args):
    del self.parent.workspaces_preferences
    self.dialog.destroy()


if __name__ == "__main__":
  signal.signal(signal.SIGINT, signal.SIG_DFL)
  indicator = IndicatorWorkspaces()
  Gtk.main()
